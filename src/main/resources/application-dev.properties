# Server port
server.port=8080
server.servlet.context-path=/api

# Database connection properties
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=123456

# JPA properties
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Dev Tool
spring.devtools.restart.enabled=true
spring.devtools.restart.additional-exclude=static/**
spring.devtools.livereload.enabled=false

# Config mail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=factory.udpm.portal@gmail.com
spring.mail.password=pdmknitkcrjdzbpx
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.protocols=TLSv1.2

# Config domain client
domain.client=http://localhost:3000

# Secret token
token.secret= ==============================SECRET=====================
# Time token(Theo giờ)
token.time_expires= 8
# Secret decode token
token.decode.secret=oEj

# Config size file
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Cấu hình đường dẫn cho Swagger UI
springfox.documentation.swagger-ui.path=/custom-swagger-ui-path

# Cấu hình login oauth2
app.domain.main=http://localhost:3000

## Google
spring.security.oauth2.client.registration.google.client-id=${MAIL_HOST}
spring.security.oauth2.client.registration.google.client-secret=${MAIL_HOST}
#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:3000/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://accounts.google.com/o/oauth2/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

#Facebook
spring.security.oauth2.client.registration.facebook.client-id=${MAIL_HOST}
spring.security.oauth2.client.registration.facebook.client-secret=${MAIL_HOST}
spring.security.oauth2.client.registration.facebook.scope=email,public_profile

#Linkedin
spring.security.oauth2.client.registration.linkedin.client-id=${MAIL_HOST}
spring.security.oauth2.client.registration.linkedin.client-secret=${MAIL_HOST}
spring.security.oauth2.client.registration.linkedin.scope=r_emailaddress,r_liteprofile
spring.security.oauth2.client.registration.linkedin.client-authentication-method= post
spring.security.oauth2.client.registration.linkedin.redirect-uri=http://localhost:3000
spring.security.oauth2.client.registration.linkedin.authorization-grant-type= authorization_code
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute= id

## Log security
#logging.level.org.springframework.security=TRACE